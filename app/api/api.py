import json


def point_polygon(obj):
    poligono = [[-65.249813,-21.482379],[-65.2118,-21.29097],[-65.222802,-21.253301],[-65.189081,-21.163475],[-65.201972,-21.071378],[-65.176632,-20.950314],[-65.070286,-20.966211],[-65.012908,-21.029381],[-64.926242,-21.032794],[-64.850289,-21.092239],[-64.7982,-21.095143],[-64.781767,-21.042509],[-64.727622,-20.941412],[-64.659523,-20.94427],[-64.606032,-20.981142],[-64.527233,-21.097563],[-64.457146,-21.083056],[-64.364323,-21.142751],[-64.203189,-21.134945],[-64.181661,-21.030775],[-64.193248,-20.95559],[-64.11412,-20.911653],[-64.025562,-20.962463],[-63.987424,-21.003661],[-63.001493,-21.00366],[-62.261347,-20.992515],[-62.266646,-20.562743],[-62.179371,-20.442616],[-62.692511,-20.442218],[-63.021878,-20.444249],[-63.249094,-20.460627],[-63.357629,-20.460053],[-63.357051,-20.392521],[-63.464052,-20.45354],[-63.579115,-20.447158],[-63.667203,-20.473214],[-63.694238,-20.415848],[-63.692366,-20.345388],[-63.707569,-20.25429],[-63.680982,-20.207658],[-63.692305,-20.148731],[-63.725144,-20.116526],[-63.728097,-19.989892],[-63.708993,-19.859869],[-63.721617,-19.753696],[-63.693864,-19.602153],[-63.713552,-19.549824],[-63.704515,-19.502926],[-63.71813,-19.436994],[-63.714482,-19.272116],[-63.74451,-19.185157],[-63.706654,-19.050074],[-63.769874,-19.031858],[-63.810203,-19.054364],[-63.884408,-19.029449],[-63.908584,-19.050297],[-63.913194,-19.152786],[-63.946705,-19.181932],[-64.016531,-19.173988],[-64.068472,-19.005271],[-64.131261,-18.964444],[-64.195923,-18.948168],[-64.214274,-18.881095],[-64.258268,-18.837379],[-64.319814,-18.726705],[-64.3292,-18.665467],[-64.366007,-18.620773],[-64.433891,-18.633027],[-64.469724,-18.668461],[-64.557944,-18.674501],[-64.647482,-18.601851],[-64.685504,-18.538927],[-64.784368,-18.526043],[-64.80601,-18.488659],[-64.876414,-18.489235],[-64.932934,-18.518819],[-65.046184,-18.611656],[-65.056923,-18.675978],[-65.161643,-18.610175],[-65.20556,-18.623022],[-65.247798,-18.602926],[-65.245818,-18.505992],[-65.279952,-18.508285],[-65.309773,-18.442969],[-65.345672,-18.417878],[-65.366575,-18.435417],[-65.506353,-18.386777],[-65.545406,-18.404371],[-65.593576,-18.374148],[-65.693863,-18.351932],[-65.684296,-18.416722],[-65.58471,-18.498219],[-65.52556,-18.528642],[-65.486025,-18.590754],[-65.383386,-18.638214],[-65.417502,-18.662817],[-65.400619,-18.701991],[-65.429177,-18.748016],[-65.434299,-18.821611],[-65.397549,-18.918374],[-65.480861,-18.925933],[-65.532415,-18.976513],[-65.582358,-18.996405],[-65.540874,-19.085359],[-65.495957,-19.089578],[-65.469902,-19.122627],[-65.406248,-19.143825],[-65.361132,-19.262751],[-65.31725,-19.300188],[-65.232012,-19.31998],[-65.141649,-19.377972],[-65.056052,-19.385831],[-64.970371,-19.346794],[-64.852588,-19.410229],[-64.818439,-19.501326],[-64.842874,-19.587481],[-64.7903,-19.631368],[-64.741775,-19.70704],[-64.739287,-19.78984],[-64.78452,-19.85539],[-64.794973,-19.902795],[-64.850825,-19.981087],[-64.888016,-19.966467],[-64.91929,-19.860881],[-65.052678,-19.820379],[-65.08313,-19.931908],[-65.062012,-19.956981],[-65.104635,-20.016542],[-65.152172,-20.012404],[-65.203259,-19.937953],[-65.305121,-20.026065],[-65.233657,-20.13055],[-65.301626,-20.177791],[-65.282402,-20.232958],[-65.221773,-20.313821],[-65.271258,-20.457013],[-65.268594,-20.504707],[-65.327597,-20.511866],[-65.379899,-20.558883],[-65.350021,-20.629578],[-65.351788,-20.632029],[-65.375308,-20.747138],[-65.346373,-20.863562],[-65.376679,-20.869739],[-65.401051,-20.947097],[-65.399907,-21.00692],[-65.420608,-21.061266],[-65.402458,-21.160264],[-65.438503,-21.18241],[-65.429431,-21.361526],[-65.437089,-21.426541],[-65.409184,-21.43548],[-65.387706,-21.516353],[-65.311672,-21.485804],[-65.249813,-21.482379]]
    punto = [-19.891017337524648, -65.088969087838]
    return is_inside_sm_parallel(punto, poligono)


def is_inside_sm_parallel(points, polygon):
    ln = len(points)
    D = np.empty(ln, dtype=numba.boolean) 
    for i in numba.prange(ln):
        D[i] = is_inside_sm(polygon,points[i])
    return D 


def is_inside_sm(polygon, point):
    length = len(polygon)-1
    dy2 = point[1] - polygon[0][1]
    intersections = 0
    ii = 0
    jj = 1

    while ii<length:
        dy  = dy2
        dy2 = point[1] - polygon[jj][1]

        # consider only lines which are not completely above/bellow/right from the point
        if dy*dy2 <= 0.0 and (point[0] >= polygon[ii][0] or point[0] >= polygon[jj][0]):

            # non-horizontal line
            if dy<0 or dy2<0:
                F = dy*(polygon[jj][0] - polygon[ii][0])/(dy-dy2) + polygon[ii][0]

                if point[0] > F: # if line is left from the point - the ray moving towards left, will intersect it
                    intersections += 1
                elif point[0] == F: # point on line
                    return 2

            # point on upper peak (dy2=dx2=0) or horizontal line (dy=dy2=0 and dx*dx2<=0)
            elif dy2==0 and (point[0]==polygon[jj][0] or (dy==0 and (point[0]-polygon[ii][0])*(point[0]-polygon[jj][0])<=0)):
                return 2

        ii = jj
        jj += 1

    #print 'intersections =', intersections
    return intersections & 1  


'''


var turf =require("@turf/turf");// require('turf');
//var pt = turf.point([-19.04364441329731, -65.24743167601606]);
var pt = turf.point([-19.891017337524648, -65.088969087838]);

let puntos = [
  [-65.249813,-21.482379],[-65.2118,-21.29097],[-65.222802,-21.253301],[-65.189081,-21.163475],[-65.201972,-21.071378],[-65.176632,-20.950314],[-65.070286,-20.966211],[-65.012908,-21.029381],[-64.926242,-21.032794],[-64.850289,-21.092239],[-64.7982,-21.095143],[-64.781767,-21.042509],[-64.727622,-20.941412],[-64.659523,-20.94427],[-64.606032,-20.981142],[-64.527233,-21.097563],[-64.457146,-21.083056],[-64.364323,-21.142751],[-64.203189,-21.134945],[-64.181661,-21.030775],[-64.193248,-20.95559],[-64.11412,-20.911653],[-64.025562,-20.962463],[-63.987424,-21.003661],[-63.001493,-21.00366],[-62.261347,-20.992515],[-62.266646,-20.562743],[-62.179371,-20.442616],[-62.692511,-20.442218],[-63.021878,-20.444249],[-63.249094,-20.460627],[-63.357629,-20.460053],[-63.357051,-20.392521],[-63.464052,-20.45354],[-63.579115,-20.447158],[-63.667203,-20.473214],[-63.694238,-20.415848],[-63.692366,-20.345388],[-63.707569,-20.25429],[-63.680982,-20.207658],[-63.692305,-20.148731],[-63.725144,-20.116526],[-63.728097,-19.989892],[-63.708993,-19.859869],[-63.721617,-19.753696],[-63.693864,-19.602153],[-63.713552,-19.549824],[-63.704515,-19.502926],[-63.71813,-19.436994],[-63.714482,-19.272116],[-63.74451,-19.185157],[-63.706654,-19.050074],[-63.769874,-19.031858],[-63.810203,-19.054364],[-63.884408,-19.029449],[-63.908584,-19.050297],[-63.913194,-19.152786],[-63.946705,-19.181932],[-64.016531,-19.173988],[-64.068472,-19.005271],[-64.131261,-18.964444],[-64.195923,-18.948168],[-64.214274,-18.881095],[-64.258268,-18.837379],[-64.319814,-18.726705],[-64.3292,-18.665467],[-64.366007,-18.620773],[-64.433891,-18.633027],[-64.469724,-18.668461],[-64.557944,-18.674501],[-64.647482,-18.601851],[-64.685504,-18.538927],[-64.784368,-18.526043],[-64.80601,-18.488659],[-64.876414,-18.489235],[-64.932934,-18.518819],[-65.046184,-18.611656],[-65.056923,-18.675978],[-65.161643,-18.610175],[-65.20556,-18.623022],[-65.247798,-18.602926],[-65.245818,-18.505992],[-65.279952,-18.508285],[-65.309773,-18.442969],[-65.345672,-18.417878],[-65.366575,-18.435417],[-65.506353,-18.386777],[-65.545406,-18.404371],[-65.593576,-18.374148],[-65.693863,-18.351932],[-65.684296,-18.416722],[-65.58471,-18.498219],[-65.52556,-18.528642],[-65.486025,-18.590754],[-65.383386,-18.638214],[-65.417502,-18.662817],[-65.400619,-18.701991],[-65.429177,-18.748016],[-65.434299,-18.821611],[-65.397549,-18.918374],[-65.480861,-18.925933],[-65.532415,-18.976513],[-65.582358,-18.996405],[-65.540874,-19.085359],[-65.495957,-19.089578],[-65.469902,-19.122627],[-65.406248,-19.143825],[-65.361132,-19.262751],[-65.31725,-19.300188],[-65.232012,-19.31998],[-65.141649,-19.377972],[-65.056052,-19.385831],[-64.970371,-19.346794],[-64.852588,-19.410229],[-64.818439,-19.501326],[-64.842874,-19.587481],[-64.7903,-19.631368],[-64.741775,-19.70704],[-64.739287,-19.78984],[-64.78452,-19.85539],[-64.794973,-19.902795],[-64.850825,-19.981087],[-64.888016,-19.966467],[-64.91929,-19.860881],[-65.052678,-19.820379],[-65.08313,-19.931908],[-65.062012,-19.956981],[-65.104635,-20.016542],[-65.152172,-20.012404],[-65.203259,-19.937953],[-65.305121,-20.026065],[-65.233657,-20.13055],[-65.301626,-20.177791],[-65.282402,-20.232958],[-65.221773,-20.313821],[-65.271258,-20.457013],[-65.268594,-20.504707],[-65.327597,-20.511866],[-65.379899,-20.558883],[-65.350021,-20.629578],[-65.351788,-20.632029],[-65.375308,-20.747138],[-65.346373,-20.863562],[-65.376679,-20.869739],[-65.401051,-20.947097],[-65.399907,-21.00692],[-65.420608,-21.061266],[-65.402458,-21.160264],[-65.438503,-21.18241],[-65.429431,-21.361526],[-65.437089,-21.426541],[-65.409184,-21.43548],[-65.387706,-21.516353],[-65.311672,-21.485804],[-65.249813,-21.482379]
  ];
 
 points = [];
 puntos.forEach( function(valor, indice, array) {
    points.push(valor.reverse())
});
var poly = turf.polygon([points]);
console.log(turf.booleanPointInPolygon(pt, poly));



'''